buildscript {

    ext {
        lombokVersion = '1.18.12'
    }

}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'idea'
}

javadoc {
    options.encoding = 'UTF-8'
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'antlr'
apply plugin: 'maven-publish'
apply plugin: 'application'

mainClassName = "uk.modl.server.ModlServer"

sourceCompatibility = 1.8
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

group = "uk.modl"
applicationName = "java-interpreter"
archivesBaseName = "java-interpreter"
version = "0.1.1"

def isSnapshot = version.endsWith("SNAPSHOT")

repositories {
    mavenCentral()
}

wrapper {
    gradleVersion = '5.1'
}

dependencies {
// https://mvnrepository.com/artifact/io.vavr/vavr
    compile group: 'io.vavr', name: 'vavr', version: '0.10.2'

    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.antlr/antlr4
    compile group: 'org.antlr', name: 'antlr4', version: '4.7'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.2'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.2'

    // Dependency and config for Lombok annotations
    compile("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.29'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'

}


sourceSets {
    main.java.srcDirs = ['src/main/java', 'src/main/gen']
    test.java.srcDirs = ['src/test/java']
}


task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier 'sources'
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc
    classifier 'javadoc'
}


artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

/*
 * MIT License
 *
 * Copyright (c) 2020 NUM Technology Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
 * to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of
 * the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/***********
 * MAVEN PUBLISHING
 ***********/

publishing {
    publications {
        mavenJava(MavenPublication) {
            customisePom(pom)

            groupId = "uk.modl"
            artifactId = 'java-interpreter'

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }

            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
            if (!isSnapshot) {
                def stUser
                def stPwd

                if (project.hasProperty('sonatypeUsername')) {
                    stUser = sonatypeUsername
                } else {
                    stUser = "notdefined"
                    logger.warn("sonatypeUsername not defined. Please update your gradle config file")
                }

                if (project.hasProperty('sonatypePassword')) {
                    stPwd = sonatypePassword
                } else {
                    stPwd = "notdefined"
                    logger.warn("sonatypePassword not defined. Please update your gradle config file")
                }

                credentials {
                    username stUser
                    password stPwd
                }
            }
        }
    }
}


signing {
    required {
        // signing is required if this is a release version and the artifacts are to be published
        !isSnapshot && tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}


def customisePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'java-interpreter'
            description 'Java interpreter for MODL language'
            url 'https://github.com/MODLanguage/java-interpreter'

            licenses {
                license {
                    name 'MIT license'
                    url 'https://opensource.org/licenses/MIT'
                    distribution 'repo'
                }
            }

            scm {
                connection 'scm:git:git://MODLanguage/java-interpreter.git'
                developerConnection 'scm:git:git://MODLanguage/java-interpreter.git'
                url 'https://github.com/MODLanguage/java-interpreter'
            }
            developers {
                developer {
                    id 'tony.walmsley@num.uk'
                    name 'Tony Walmsley'
                    email 'tony.walmsley@num.uk'
                }
            }
        }
    }
}


/***********
 * GRAMMAR REMOTE SETUP
 ***********/

//we create the branch that we will contain the changes
task createBranch(type: Exec) {
    if (!project.hasProperty('branch')) {
        logger.warn("Branch not provided, using default: branch-for-pr")
        project.ext.branch = "branch-for-pr"
    }
    if (!project.hasProperty('grammarTag')) {
        logger.warn("grammarTag not provided, using default: latest")
        project.ext.grammarTag = "latest"
    }

    println "branch: " + project.findProperty('branch')
    commandLine "git", "checkout", "-b", branch
}

//we connect to the grammar repo that contains the files we want
task createRemote(type: Exec) {
    commandLine "git", "remote", "add", "grammar", "git@github.com:MODLanguage/grammar"
}

//we get the branches and tags from the grammar repo
task fetchRemote(type: Exec, dependsOn: createRemote) {
    commandLine "git", "fetch", "--tags", "grammar"
}

//we create a tmp branch with a copy of the grammar on the tag we're interested in
task checkoutGrammar(type: Exec) {
    dependsOn(fetchRemote)
    dependsOn(createBranch)
    commandLine "git", "checkout", "-b", "removeme-export-branch", "tags/" + grammarTag
}

/***********
 * GRAMMAR FILES SYNC
 ***********/

//we extract the files we're intrested in (only the grammar antlr files)
task splitSubtreeGrammar(type: Exec, dependsOn: checkoutGrammar) {
    commandLine "git", "subtree", "split", "--prefix", "antlr4", "-b", "removeme-antlr4-branch"
}

//we go back to our main branch to do the subtree in the right place
task switchBranchGrammar(type: Exec, dependsOn: splitSubtreeGrammar) {
    commandLine "git", "checkout", branch
}

task updateGrammar(type: Exec, dependsOn: switchBranchGrammar) {
    group = 'git'
    description = 'Updates the grammar files from the grammar repo'

    commandLine "git", "subtree", "merge", "--squash", "--prefix=grammar/", "removeme-antlr4-branch"
}

/***********
 * GRAMMAR TESTS SYNC
 ***********/

//we extract the files we're intrested in (only the grammar antlr files)
task splitSubtreeTests(type: Exec, dependsOn: checkoutGrammar) {
    commandLine "git", "subtree", "split", "--prefix", "tests", "-b", "removeme-tests-branch"
}

//we go back to our main branch to do the subtree in the right place
task switchBranchTests(type: Exec, dependsOn: splitSubtreeTests) {
    commandLine "git", "checkout", branch
}

task updateTests(type: Exec, dependsOn: switchBranchTests) {
    group = 'git'
    description = 'Updates the test files from the grammar repo'

    commandLine "git", "subtree", "merge", "--squash", "--prefix=grammar_tests/", "removeme-tests-branch"
}

/***********
 * GRAMMAR FILES AND TESTS SYNC
 ***********/

//we go back to our main branch to do the subtree in the right place
task switchExportBranchGrammarAndTests(type: Exec, dependsOn: updateGrammar) {
    commandLine "git", "checkout", "removeme-export-branch"
}

//we extract the files we're interested in (only the tests files)
task splitSubtreeGrammarAndTests(type: Exec, dependsOn: switchExportBranchGrammarAndTests) {
    commandLine "git", "subtree", "split", "--prefix", "tests", "-b", "removeme-tests-branch"
}

//we go back to our main branch to do the subtree in the right place
task switchBranchGrammarAndTests(type: Exec, dependsOn: splitSubtreeGrammarAndTests) {
    commandLine "git", "checkout", branch
}

task updateGrammarWithTests(type: Exec) {
    dependsOn(updateGrammar)
    dependsOn(switchBranchGrammarAndTests)

    group = 'git'
    description = 'Updates the grammar files and the test files from the grammar repo'

    commandLine "git", "subtree", "merge", "--squash", "--prefix=grammar_tests/", "removeme-tests-branch"
}

/***********
 * GIT CLEANUP
 ***********/

//we clean the temporary branches used in the process
task cleanBranches(type: Exec) {
    ignoreExitValue true
    commandLine "git", "branch", "-D", "removeme-export-branch", "removeme-antlr4-branch", "removeme-tests-branch"
}

task gitClean(type: Exec, dependsOn: cleanBranches) {
    group = 'git'
    description = 'Cleans items generated as part of the git tasks (branches, remote, ...)'
    ignoreExitValue true
    commandLine "git", "remote", "rm", "grammar"
}

updateGrammar.finalizedBy gitClean
updateTests.finalizedBy gitClean
updateGrammarWithTests.finalizedBy gitClean

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'Interpret'
    }
    baseName = 'interpreter'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}